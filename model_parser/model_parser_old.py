# .obj file to C-style array of vertices and faces converter.
# Intended to be used for my 3D graphics library.
# Made by Szymon Kajda



# For mesh name extraction
import os
# For floating to fixed point number conversion
import numpy as np
# For "press any key to continue"
from sys import platform



#
# Default Config
#

print_to_std_out = True
print_to_file = True
face_fixed_vert_cnt = False
use_fixed_point = True
override_face_arr_type = False
# Vertex types
floating_point_type_name = "flp_t"
fixed_point_type_name = "fxp_t"
fixed_point_type = "int32"
# Fixed point number of binary digits after decimal place
fp_dp = 16
# Define types of vertex and face arrays
vert_arr_type = floating_point_type_name
# Automatically adjusted
face_arr_type = "uint8_t"
# Define something separating IDs of vertices in face array
face_vid_sep = "F_VID_SEP"



#
# Main program
#

dirname = os.path.dirname(__file__)

def read_config():

    # Specify input file
    print( "Input file path: " )
    user_in = input()
    filename = os.path.join( dirname, user_in )
    in_file = open(filename, 'r')

    print( "Print to file? (y - yes, n - no (only here), b - both (default): ", end = '' )
    user_in = input()

    if user_in == 'y':
        print_to_std_out = False
    elif user_in == 'n':
        print_to_file = False

    # Specify output file
    if print_to_file:
        print( "Output file path: " )
        user_in = input()
        filename = os.path.join( dirname, user_in )
        out_file = open(filename, 'w')

    # Specify if faces consist of fixed number of vertices
    print( "Fixed number of vertices in faces? (y - yes, n - no (default): ", end = '' )
    user_in = input()

    if user_in == 'y':
        face_fixed_vert_cnt = True

    # Specify vertex array type
    print( "Vertex array type ( fl - floating point ( \"flp_t\" (float or double) ), fx - fixed point (default) ): ", end = '' )
    user_in = input()

    if user_in == "fl":
        use_fixed_point = False
        vert_arr_type = floating_point_type_name

    else:
        print( "Fixed point type (int8, int16, int32 (default), int64): ", end = '' )
        user_in = input()

        if user_in:
            if user_in != "int8" and user_in != "int16" and user_in != "int32" and user_in != "int64":
                print( "Wrong intput! Continuing with the default value" )
            else:
                fixed_point_type = user_in

        print( "Number of binary digits after the decimal place (16 default): ", end = '' )
        user_in = input()

        if user_in:
            fp_dp = user_in

    # Specify whether to override face array type
    print( "Override face array type to \"size_t\"? (y - yes (default), n - no: ", end = '' )
    user_in = input()
    if user_in == 'n':
        override_face_arr_type = False

    # Specify vertex ID separator in face array
    print( "Vertex ID separator in face array (default \"F_VID_SEP\"): ", end = '' )
    user_in = input()

    if user_in:
        face_vid_sep = user_in

    # Define mesh name
    print( "Custom mesh name? (if no, leave empty): ", end = '' )
    user_in = input()

    if user_in:
        mesh_name = user_in
    else:
        mesh_name = os.path.basename( in_file.name ).split('.')[0]



# Read lines
in_lines = in_file.readlines()

vert_lines = []
face_lines = []

for line in in_lines:
    if line[0] == 'v':
        vert_lines.append(line)
    elif line[0] == 'f':
        face_lines.append(line)

last_vert_line = vert_lines[-1]
last_face_line = face_lines[-1]

vertex_count = len(vert_lines)
face_count = len(face_lines)

# Assign type based on the greatest vertex ID (number of vertices)
if vertex_count <= 255:
    face_arr_type = "uint8_t"
elif vertex_count <= 65535:
    face_arr_type = "uint16_t"
elif vertex_count <= 4294967295:
    face_arr_type = "uint32_t"
# Please don't XD
elif vertex_count <= 18446744073709551615:
    face_arr_type = "uint64_t"

if override_face_arr_type:
    face_arr_type = "size_t"



# Print header
if print_to_file:
    out_file.write( "// \n" )
    out_file.write( "// Generated by obj file to C array converter by Szymon Kajda.\n" )
    out_file.write( "// Mesh name: \"" + mesh_name + "\"\n" )
    out_file.write( "// Settings:\n" )
    out_file.write( "// \tVertex coordinates representation: " )
    if use_fixed_point:
        out_file.write( "fixed point\n" )
        out_file.write( "// \tFixed point type: \"" + fixed_point_type + "_t\"\n" )
        out_file.write( "// \tNumber of binary digits after the decimal place: " + str(fp_dp) + "\n" )
    else:
        out_file.write( "floating point ("+floating_point_type_name+")\n" )
    out_file.write( "// \tFace array type: " + face_arr_type + "\n" )
    out_file.write( "// \tFixed number of vertices in faces: " )
    if face_fixed_vert_cnt:
        out_file.write( "yes\n" )
    else:
        out_file.write( "no\n" )
        out_file.write( "// \tVertex ID separator in face array: " + face_vid_sep + "\n" )
    out_file.write( "// \n\n" )
if print_to_std_out:
    print( "// " )
    print( "// Generated by obj file to C array converter by Szymon Kajda." )
    print( "// Mesh name: \"" + mesh_name + "\"" )
    print( "// Settings:" )
    print( "// \tVertex coordinates representation: ", end = '' )
    if use_fixed_point:
        print( "fixed point" )
        print( "// \tFixed point type: \"" + fixed_point_type + "_t\"" )
        print( "// \tNumber of binary digits after the decimal place: " + str(fp_dp) )
    else:
        print( "floating point ("+floating_point_type_name+")" )
    print( "// \tFace array type: " + face_arr_type )
    print( "// \tFixed number of vertices in faces: ", end = '' )
    if face_fixed_vert_cnt:
        print( "yes" )
    else:
        print( "no" )
        print( "// \tVertex ID separator in face array: " + face_vid_sep )
    print( "// " )
    print( "" )

# Print definitions
if print_to_file:
    out_file.write( "#define " + mesh_name.upper() + "_MESH_V_CNT " + str(vertex_count) + '\n' )
    out_file.write( "#define " + mesh_name.upper() + "_MESH_F_CNT " + str(face_count) + "\n\n" )
if print_to_std_out:
    print( "#define " + mesh_name.upper() + "_MESH_V_CNT " + str(vertex_count) )
    print( "#define " + mesh_name.upper() + "_MESH_F_CNT " + str(face_count) )
    print( "" )

# Print header of vertex array
if print_to_file:
    out_file.write( "const "+vert_arr_type+" "+mesh_name+"_mesh_verts[] = {\n" )
if print_to_std_out:
    print( "const "+vert_arr_type+" "+mesh_name+"_mesh_verts[] = {" )

# Print vertices
for line in vert_lines:
    elements = line.split()
    
    if use_fixed_point:
        # Convert floating point values into fixed point ones
        values = np.array([], dtype=fixed_point_type)
        
        for val in elements[1:]:
            # What kind of int is it casted to?
            float_val = float(val) * float(1<<fp_dp) + ( 0.5 if float(val) >= 0 else -0.5 )

            if fixed_point_type == "int8":
                value = np.int8( float_val )
            elif fixed_point_type == "int16":
                value = np.int16( float_val )
            elif fixed_point_type == "int32":
                value = np.int32( float_val )
            elif fixed_point_type == "int64":
                value = np.int64( float_val )
            
            values = np.append( values, str(value) )

        if print_to_file:
            out_file.write( '\t' + ', '.join(values) )
        if print_to_std_out:
            print( '\t' +  ', '.join(values) , end = '' )

    else:
        if print_to_file:
            out_file.write( '\t' + ', '.join( elements[1:] ) )
        if print_to_std_out:
            print( '\t' + ', '.join( elements[1:] ), end = '' )
        
    if line != last_vert_line:
        if print_to_file:
            out_file.write( ',\n' )
        if print_to_std_out:
            print( ',' )
    else:
        if print_to_file:
            out_file.write( '\n' )
        if print_to_std_out:
            print( '' )

# Close the array
if print_to_file:
    out_file.write( "};\n" )
if print_to_std_out:
    print( "};" )



# Print header of face array
if print_to_file:
    out_file.write( "const "+face_arr_type+" "+mesh_name+"_mesh_faces[] = {\n" )
if print_to_std_out:
    print( "const "+face_arr_type+" "+mesh_name+"_mesh_faces[] = {" )

# Print faces
for line in face_lines:
    elements = line.split()

    # Subtract 1 from each vertex ID since indices in C start from 0
    elements[1:] = [*map( lambda x: str(int(x)-1), elements[1:] )]
        
    if print_to_file:
        out_file.write( '\t' + ', '.join( elements[1:] ) )
        if not face_fixed_vert_cnt:
            out_file.write( ",\t" + face_vid_sep )
            
    if print_to_std_out:
        print( '\t' + ', '.join( elements[1:] ), end = '' )
        if not face_fixed_vert_cnt:
            print( ",\t" + face_vid_sep, end = '' )

    if line != last_face_line:
        if print_to_file:
            out_file.write( ',\n' )
        if print_to_std_out:
            print( ',' )
    else:
        if print_to_file:
            out_file.write( '\n' )
        if print_to_std_out:
            print( '' )

# Close the array
if print_to_file:
    out_file.write( "};\n" )
if print_to_std_out:
    print( "};" )

# Close both files
in_file.close()
if print_to_file:
    out_file.close()
    

#if platform.startswith('linux'):
#    os.system("read")
#else:
#    os.system("pause")
